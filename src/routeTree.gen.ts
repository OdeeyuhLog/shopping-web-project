/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ItemsIndexImport } from './routes/items/index'
import { Route as ItemsIdImport } from './routes/items/$id'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ItemsIndexRoute = ItemsIndexImport.update({
  path: '/items/',
  getParentRoute: () => rootRoute,
} as any)

const ItemsIdRoute = ItemsIdImport.update({
  path: '/items/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/items/$id': {
      id: '/items/$id'
      path: '/items/$id'
      fullPath: '/items/$id'
      preLoaderRoute: typeof ItemsIdImport
      parentRoute: typeof rootRoute
    }
    '/items/': {
      id: '/items/'
      path: '/items'
      fullPath: '/items'
      preLoaderRoute: typeof ItemsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/items/$id': typeof ItemsIdRoute
  '/items': typeof ItemsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/items/$id': typeof ItemsIdRoute
  '/items': typeof ItemsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/items/$id': typeof ItemsIdRoute
  '/items/': typeof ItemsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/items/$id' | '/items'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/items/$id' | '/items'
  id: '__root__' | '/' | '/items/$id' | '/items/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ItemsIdRoute: typeof ItemsIdRoute
  ItemsIndexRoute: typeof ItemsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ItemsIdRoute: ItemsIdRoute,
  ItemsIndexRoute: ItemsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/items/$id",
        "/items/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/items/$id": {
      "filePath": "items/$id.tsx"
    },
    "/items/": {
      "filePath": "items/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
